{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinhd\\\\Desktop\\\\Test\\\\frontend\\\\src\\\\components\\\\VideoRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Room, VideoPresets, RoomEvent, RemoteParticipant, LocalParticipant, RemoteTrackPublication, LocalTrackPublication, Participant, Track, createLocalTracks } from 'livekit-client';\nimport './VideoRoom.css';\nimport { Participant as ParticipantComponent } from './Participant';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VideoRoom = ({\n  token,\n  url,\n  roomName,\n  participantName,\n  onLeaveRoom\n}) => {\n  _s();\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [localParticipant, setLocalParticipant] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isVideoEnabled, setIsVideoEnabled] = useState(true);\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [activeScreenShare, setActiveScreenShare] = useState(null);\n  const [error, setError] = useState('');\n\n  // Connect to the room when component mounts\n  useEffect(() => {\n    let roomInstance = null;\n    let isMounted = true;\n    const connect = async () => {\n      try {\n        console.log('Attempting to connect to LiveKit room:', roomName);\n        console.log('Using URL:', url);\n\n        // Create a new room instance\n        roomInstance = new Room({\n          adaptiveStream: true,\n          dynacast: true,\n          stopMicTrackOnMute: false\n        });\n        setRoom(roomInstance);\n\n        // Set up event listeners\n        setupRoomEventListeners(roomInstance);\n\n        // Connect to the LiveKit room\n        console.log('Connecting to LiveKit with token...');\n        await roomInstance.connect(url, token);\n        if (!isMounted) {\n          console.log('Component unmounted during connection, disconnecting');\n          roomInstance.disconnect();\n          return;\n        }\n        console.log('Successfully connected to room:', roomName);\n\n        // Check if localParticipant exists\n        if (!roomInstance.localParticipant) {\n          throw new Error('LocalParticipant not available after connection');\n        }\n\n        // Set local participant immediately after connection\n        console.log('Local participant ID:', roomInstance.localParticipant.identity);\n        setLocalParticipant(roomInstance.localParticipant);\n        setIsConnected(true);\n\n        // Enable camera and microphone\n        console.log('Creating local tracks...');\n        const tracks = await createLocalTracks({\n          audio: true,\n          video: true,\n          videoPreset: VideoPresets.h720\n        });\n        if (!isMounted) {\n          console.log('Component unmounted after creating tracks, disconnecting');\n          roomInstance.disconnect();\n          return;\n        }\n        console.log('Publishing tracks to room...');\n        // Publish each track individually instead of using publishTracks\n        for (const track of tracks) {\n          try {\n            console.log(`Publishing ${track.kind} track...`);\n            await roomInstance.localParticipant.publishTrack(track);\n          } catch (trackErr) {\n            console.error(`Error publishing ${track.kind} track:`, trackErr);\n          }\n        }\n\n        // Update participants list after publishing tracks\n        updateParticipants(roomInstance);\n      } catch (err) {\n        console.error('Error connecting to room:', err);\n        console.error('Error details:', {\n          name: err.name,\n          message: err.message,\n          stack: err.stack,\n          roomName,\n          url,\n          roomDetails: roomInstance ? {\n            localParticipant: !!roomInstance.localParticipant,\n            remoteParticipants: !!roomInstance.remoteParticipants\n          } : 'Room not initialized'\n        });\n        if (isMounted) {\n          setError(err.message || 'Failed to connect to room');\n        }\n\n        // Clean up on error\n        if (roomInstance) {\n          try {\n            roomInstance.disconnect();\n          } catch (disconnectErr) {\n            console.error('Error during disconnect after connection failure:', disconnectErr);\n          }\n        }\n      }\n    };\n    connect();\n\n    // Clean up when component unmounts\n    return () => {\n      console.log('Component unmounting, cleaning up room connection');\n      isMounted = false;\n      if (roomInstance) {\n        try {\n          // First remove all listeners to prevent callback errors during dismount\n          roomInstance.removeAllListeners();\n\n          // Then disconnect from the room\n          console.log('Disconnecting from room');\n          roomInstance.disconnect();\n        } catch (err) {\n          console.error('Error during cleanup:', err);\n        }\n      }\n    };\n  }, [token, url, roomName, participantName]);\n\n  // Setup room event listeners\n  const setupRoomEventListeners = roomInstance => {\n    roomInstance.on(RoomEvent.ParticipantConnected, () => {\n      updateParticipants(roomInstance);\n    });\n    roomInstance.on(RoomEvent.ParticipantDisconnected, () => {\n      updateParticipants(roomInstance);\n    });\n    roomInstance.on(RoomEvent.TrackSubscribed, (track, publication, participant) => {\n      // Handle screen share\n      if (track.kind === Track.Kind.Video && track.source === Track.Source.ScreenShare) {\n        setActiveScreenShare({\n          participant,\n          track\n        });\n      }\n      updateParticipants(roomInstance);\n    });\n    roomInstance.on(RoomEvent.TrackUnsubscribed, (track, publication, participant) => {\n      // Handle screen share ended\n      if (track.kind === Track.Kind.Video && track.source === Track.Source.ScreenShare) {\n        setActiveScreenShare(null);\n      }\n      updateParticipants(roomInstance);\n    });\n    roomInstance.on(RoomEvent.Disconnected, () => {\n      console.log('Room disconnected event received');\n      setIsConnected(false);\n      onLeaveRoom();\n    });\n    roomInstance.on(RoomEvent.ConnectionStateChanged, state => {\n      console.log('Connection state changed:', state);\n    });\n  };\n\n  // Update the participants state\n  const updateParticipants = roomInstance => {\n    if (!roomInstance) return;\n    try {\n      console.log('Updating participants list...');\n\n      // Add additional checks to prevent errors\n      if (!roomInstance.remoteParticipants) {\n        console.log('remoteParticipants is not available yet, skipping update');\n        return;\n      }\n\n      // Check if values method is available\n      if (typeof roomInstance.remoteParticipants.values !== 'function') {\n        console.log('remoteParticipants.values is not a function, trying alternative method');\n        // Try alternative way to get remote participants\n        const remotes = Object.values(roomInstance.remoteParticipants || {});\n        setParticipants(remotes);\n        return;\n      }\n      const remotes = Array.from(roomInstance.remoteParticipants.values());\n      console.log(`Found ${remotes.length} remote participants`);\n      setParticipants(remotes);\n    } catch (err) {\n      console.error('Error updating participants:', err);\n    }\n  };\n\n  // Toggle video\n  const toggleVideo = async () => {\n    if (!room || !localParticipant) return;\n    try {\n      // Get video track\n      const videoTracks = localParticipant.getTracks(Track.Source.Camera);\n      if (videoTracks.length === 0) {\n        // Publish new video track if not available\n        if (isVideoEnabled) {\n          const tracks = await createLocalTracks({\n            video: true,\n            videoPreset: VideoPresets.h720\n          });\n\n          // Publish each track individually\n          for (const track of tracks) {\n            await localParticipant.publishTrack(track);\n          }\n        }\n      } else {\n        // Toggle existing video track\n        for (const publication of videoTracks) {\n          if (isVideoEnabled) {\n            await publication.mute();\n          } else {\n            await publication.unmute();\n          }\n        }\n      }\n      setIsVideoEnabled(!isVideoEnabled);\n    } catch (err) {\n      console.error('Error toggling video:', err);\n      setError('Failed to toggle video');\n    }\n  };\n\n  // Toggle audio\n  const toggleAudio = async () => {\n    if (!room || !localParticipant) return;\n    try {\n      // Get audio track\n      const audioTracks = localParticipant.getTracks(Track.Source.Microphone);\n      if (audioTracks.length === 0) {\n        // Publish new audio track if not available\n        if (isAudioEnabled) {\n          const tracks = await createLocalTracks({\n            audio: true\n          });\n\n          // Publish each track individually\n          for (const track of tracks) {\n            await localParticipant.publishTrack(track);\n          }\n        }\n      } else {\n        // Toggle existing audio track\n        for (const publication of audioTracks) {\n          if (isAudioEnabled) {\n            await publication.mute();\n          } else {\n            await publication.unmute();\n          }\n        }\n      }\n      setIsAudioEnabled(!isAudioEnabled);\n    } catch (err) {\n      console.error('Error toggling audio:', err);\n      setError('Failed to toggle audio');\n    }\n  };\n\n  // Toggle screen sharing\n  const toggleScreenShare = async () => {\n    if (!room || !localParticipant) return;\n    try {\n      if (!isScreenSharing) {\n        // Start screen sharing\n        const screenTracks = await createLocalTracks({\n          video: {\n            source: Track.Source.ScreenShare\n          }\n        });\n\n        // Publish each track individually\n        for (const track of screenTracks) {\n          await localParticipant.publishTrack(track);\n        }\n        setIsScreenSharing(true);\n      } else {\n        // Stop screen sharing\n        const screenTracks = localParticipant.getTracks(Track.Source.ScreenShare);\n        for (const publication of screenTracks) {\n          await localParticipant.unpublishTrack(publication.track);\n        }\n        setIsScreenSharing(false);\n      }\n    } catch (err) {\n      console.error('Error toggling screen share:', err);\n      // User cancelled the screen share selection\n      if (err.name === 'NotAllowedError') {\n        return;\n      }\n      setError('Failed to toggle screen share');\n    }\n  };\n\n  // Leave room\n  const leaveRoom = () => {\n    if (room) {\n      room.disconnect();\n      setIsConnected(false);\n      onLeaveRoom();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: roomName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `control-button ${!isVideoEnabled ? 'disabled' : ''}`,\n          onClick: toggleVideo,\n          children: isVideoEnabled ? 'Turn Off Camera' : 'Turn On Camera'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `control-button ${!isAudioEnabled ? 'disabled' : ''}`,\n          onClick: toggleAudio,\n          children: isAudioEnabled ? 'Mute Mic' : 'Unmute Mic'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `control-button ${isScreenSharing ? 'active' : ''}`,\n          onClick: toggleScreenShare,\n          children: isScreenSharing ? 'Stop Sharing' : 'Share Screen'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button leave\",\n          onClick: leaveRoom,\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `participants-container ${activeScreenShare ? 'with-screen-share' : ''}`,\n      children: [activeScreenShare && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"screen-share\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"screen-share-video\",\n          id: \"screen-share-video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participants\",\n        children: [localParticipant && /*#__PURE__*/_jsxDEV(ParticipantComponent, {\n          participant: localParticipant,\n          isLocal: true\n        }, \"local\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this), participants.map(participant => /*#__PURE__*/_jsxDEV(ParticipantComponent, {\n          participant: participant,\n          isLocal: false\n        }, participant.sid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoRoom, \"2xxrOZgy2m4ejXh239YtEz0VMf0=\");\n_c = VideoRoom;\nvar _c;\n$RefreshReg$(_c, \"VideoRoom\");","map":{"version":3,"names":["React","useEffect","useState","Room","VideoPresets","RoomEvent","RemoteParticipant","LocalParticipant","RemoteTrackPublication","LocalTrackPublication","Participant","Track","createLocalTracks","ParticipantComponent","jsxDEV","_jsxDEV","VideoRoom","token","url","roomName","participantName","onLeaveRoom","_s","room","setRoom","participants","setParticipants","localParticipant","setLocalParticipant","isConnected","setIsConnected","isVideoEnabled","setIsVideoEnabled","isAudioEnabled","setIsAudioEnabled","isScreenSharing","setIsScreenSharing","activeScreenShare","setActiveScreenShare","error","setError","roomInstance","isMounted","connect","console","log","adaptiveStream","dynacast","stopMicTrackOnMute","setupRoomEventListeners","disconnect","Error","identity","tracks","audio","video","videoPreset","h720","track","kind","publishTrack","trackErr","updateParticipants","err","name","message","stack","roomDetails","remoteParticipants","disconnectErr","removeAllListeners","on","ParticipantConnected","ParticipantDisconnected","TrackSubscribed","publication","participant","Kind","Video","source","Source","ScreenShare","TrackUnsubscribed","Disconnected","ConnectionStateChanged","state","values","remotes","Object","Array","from","length","toggleVideo","videoTracks","getTracks","Camera","mute","unmute","toggleAudio","audioTracks","Microphone","toggleScreenShare","screenTracks","unpublishTrack","leaveRoom","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","isLocal","map","sid","_c","$RefreshReg$"],"sources":["C:/Users/dinhd/Desktop/Test/frontend/src/components/VideoRoom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Room,\r\n  VideoPresets,\r\n  RoomEvent,\r\n  RemoteParticipant,\r\n  LocalParticipant,\r\n  RemoteTrackPublication,\r\n  LocalTrackPublication,\r\n  Participant,\r\n  Track,\r\n  createLocalTracks\r\n} from 'livekit-client';\r\nimport './VideoRoom.css';\r\nimport { Participant as ParticipantComponent } from './Participant';\r\n\r\nexport const VideoRoom = ({ token, url, roomName, participantName, onLeaveRoom }) => {\r\n  const [room, setRoom] = useState(null);\r\n  const [participants, setParticipants] = useState([]);\r\n  const [localParticipant, setLocalParticipant] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isVideoEnabled, setIsVideoEnabled] = useState(true);\r\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\r\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\r\n  const [activeScreenShare, setActiveScreenShare] = useState(null);\r\n  const [error, setError] = useState('');\r\n\r\n  // Connect to the room when component mounts\r\n  useEffect(() => {\r\n    let roomInstance = null;\r\n    let isMounted = true;\r\n\r\n    const connect = async () => {\r\n      try {\r\n        console.log('Attempting to connect to LiveKit room:', roomName);\r\n        console.log('Using URL:', url);\r\n        \r\n        // Create a new room instance\r\n        roomInstance = new Room({\r\n          adaptiveStream: true,\r\n          dynacast: true,\r\n          stopMicTrackOnMute: false,\r\n        });\r\n        \r\n        setRoom(roomInstance);\r\n\r\n        // Set up event listeners\r\n        setupRoomEventListeners(roomInstance);\r\n        \r\n        // Connect to the LiveKit room\r\n        console.log('Connecting to LiveKit with token...');\r\n        await roomInstance.connect(url, token);\r\n        \r\n        if (!isMounted) {\r\n          console.log('Component unmounted during connection, disconnecting');\r\n          roomInstance.disconnect();\r\n          return;\r\n        }\r\n        \r\n        console.log('Successfully connected to room:', roomName);\r\n        \r\n        // Check if localParticipant exists\r\n        if (!roomInstance.localParticipant) {\r\n          throw new Error('LocalParticipant not available after connection');\r\n        }\r\n        \r\n        // Set local participant immediately after connection\r\n        console.log('Local participant ID:', roomInstance.localParticipant.identity);\r\n        setLocalParticipant(roomInstance.localParticipant);\r\n        setIsConnected(true);\r\n        \r\n        // Enable camera and microphone\r\n        console.log('Creating local tracks...');\r\n        const tracks = await createLocalTracks({\r\n          audio: true,\r\n          video: true,\r\n          videoPreset: VideoPresets.h720\r\n        });\r\n        \r\n        if (!isMounted) {\r\n          console.log('Component unmounted after creating tracks, disconnecting');\r\n          roomInstance.disconnect();\r\n          return;\r\n        }\r\n        \r\n        console.log('Publishing tracks to room...');\r\n        // Publish each track individually instead of using publishTracks\r\n        for (const track of tracks) {\r\n          try {\r\n            console.log(`Publishing ${track.kind} track...`);\r\n            await roomInstance.localParticipant.publishTrack(track);\r\n          } catch (trackErr) {\r\n            console.error(`Error publishing ${track.kind} track:`, trackErr);\r\n          }\r\n        }\r\n        \r\n        // Update participants list after publishing tracks\r\n        updateParticipants(roomInstance);\r\n        \r\n      } catch (err) {\r\n        console.error('Error connecting to room:', err);\r\n        console.error('Error details:', {\r\n          name: err.name,\r\n          message: err.message,\r\n          stack: err.stack,\r\n          roomName,\r\n          url,\r\n          roomDetails: roomInstance ? { \r\n            localParticipant: !!roomInstance.localParticipant,\r\n            remoteParticipants: !!roomInstance.remoteParticipants\r\n          } : 'Room not initialized'\r\n        });\r\n        \r\n        if (isMounted) {\r\n          setError(err.message || 'Failed to connect to room');\r\n        }\r\n        \r\n        // Clean up on error\r\n        if (roomInstance) {\r\n          try {\r\n            roomInstance.disconnect();\r\n          } catch (disconnectErr) {\r\n            console.error('Error during disconnect after connection failure:', disconnectErr);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    connect();\r\n\r\n    // Clean up when component unmounts\r\n    return () => {\r\n      console.log('Component unmounting, cleaning up room connection');\r\n      isMounted = false;\r\n      \r\n      if (roomInstance) {\r\n        try {\r\n          // First remove all listeners to prevent callback errors during dismount\r\n          roomInstance.removeAllListeners();\r\n          \r\n          // Then disconnect from the room\r\n          console.log('Disconnecting from room');\r\n          roomInstance.disconnect();\r\n        } catch (err) {\r\n          console.error('Error during cleanup:', err);\r\n        }\r\n      }\r\n    };\r\n  }, [token, url, roomName, participantName]);\r\n\r\n  // Setup room event listeners\r\n  const setupRoomEventListeners = (roomInstance) => {\r\n    roomInstance.on(RoomEvent.ParticipantConnected, () => {\r\n      updateParticipants(roomInstance);\r\n    });\r\n    \r\n    roomInstance.on(RoomEvent.ParticipantDisconnected, () => {\r\n      updateParticipants(roomInstance);\r\n    });\r\n    \r\n    roomInstance.on(RoomEvent.TrackSubscribed, (track, publication, participant) => {\r\n      // Handle screen share\r\n      if (track.kind === Track.Kind.Video && track.source === Track.Source.ScreenShare) {\r\n        setActiveScreenShare({\r\n          participant,\r\n          track\r\n        });\r\n      }\r\n      updateParticipants(roomInstance);\r\n    });\r\n    \r\n    roomInstance.on(RoomEvent.TrackUnsubscribed, (track, publication, participant) => {\r\n      // Handle screen share ended\r\n      if (track.kind === Track.Kind.Video && track.source === Track.Source.ScreenShare) {\r\n        setActiveScreenShare(null);\r\n      }\r\n      updateParticipants(roomInstance);\r\n    });\r\n    \r\n    roomInstance.on(RoomEvent.Disconnected, () => {\r\n      console.log('Room disconnected event received');\r\n      setIsConnected(false);\r\n      onLeaveRoom();\r\n    });\r\n    \r\n    roomInstance.on(RoomEvent.ConnectionStateChanged, (state) => {\r\n      console.log('Connection state changed:', state);\r\n    });\r\n  };\r\n\r\n  // Update the participants state\r\n  const updateParticipants = (roomInstance) => {\r\n    if (!roomInstance) return;\r\n    \r\n    try {\r\n      console.log('Updating participants list...');\r\n      \r\n      // Add additional checks to prevent errors\r\n      if (!roomInstance.remoteParticipants) {\r\n        console.log('remoteParticipants is not available yet, skipping update');\r\n        return;\r\n      }\r\n      \r\n      // Check if values method is available\r\n      if (typeof roomInstance.remoteParticipants.values !== 'function') {\r\n        console.log('remoteParticipants.values is not a function, trying alternative method');\r\n        // Try alternative way to get remote participants\r\n        const remotes = Object.values(roomInstance.remoteParticipants || {});\r\n        setParticipants(remotes);\r\n        return;\r\n      }\r\n      \r\n      const remotes = Array.from(roomInstance.remoteParticipants.values());\r\n      console.log(`Found ${remotes.length} remote participants`);\r\n      setParticipants(remotes);\r\n    } catch (err) {\r\n      console.error('Error updating participants:', err);\r\n    }\r\n  };\r\n\r\n  // Toggle video\r\n  const toggleVideo = async () => {\r\n    if (!room || !localParticipant) return;\r\n    \r\n    try {\r\n      // Get video track\r\n      const videoTracks = localParticipant.getTracks(Track.Source.Camera);\r\n      \r\n      if (videoTracks.length === 0) {\r\n        // Publish new video track if not available\r\n        if (isVideoEnabled) {\r\n          const tracks = await createLocalTracks({\r\n            video: true,\r\n            videoPreset: VideoPresets.h720\r\n          });\r\n          \r\n          // Publish each track individually\r\n          for (const track of tracks) {\r\n            await localParticipant.publishTrack(track);\r\n          }\r\n        }\r\n      } else {\r\n        // Toggle existing video track\r\n        for (const publication of videoTracks) {\r\n          if (isVideoEnabled) {\r\n            await publication.mute();\r\n          } else {\r\n            await publication.unmute();\r\n          }\r\n        }\r\n      }\r\n      \r\n      setIsVideoEnabled(!isVideoEnabled);\r\n    } catch (err) {\r\n      console.error('Error toggling video:', err);\r\n      setError('Failed to toggle video');\r\n    }\r\n  };\r\n\r\n  // Toggle audio\r\n  const toggleAudio = async () => {\r\n    if (!room || !localParticipant) return;\r\n    \r\n    try {\r\n      // Get audio track\r\n      const audioTracks = localParticipant.getTracks(Track.Source.Microphone);\r\n      \r\n      if (audioTracks.length === 0) {\r\n        // Publish new audio track if not available\r\n        if (isAudioEnabled) {\r\n          const tracks = await createLocalTracks({\r\n            audio: true\r\n          });\r\n          \r\n          // Publish each track individually\r\n          for (const track of tracks) {\r\n            await localParticipant.publishTrack(track);\r\n          }\r\n        }\r\n      } else {\r\n        // Toggle existing audio track\r\n        for (const publication of audioTracks) {\r\n          if (isAudioEnabled) {\r\n            await publication.mute();\r\n          } else {\r\n            await publication.unmute();\r\n          }\r\n        }\r\n      }\r\n      \r\n      setIsAudioEnabled(!isAudioEnabled);\r\n    } catch (err) {\r\n      console.error('Error toggling audio:', err);\r\n      setError('Failed to toggle audio');\r\n    }\r\n  };\r\n\r\n  // Toggle screen sharing\r\n  const toggleScreenShare = async () => {\r\n    if (!room || !localParticipant) return;\r\n    \r\n    try {\r\n      if (!isScreenSharing) {\r\n        // Start screen sharing\r\n        const screenTracks = await createLocalTracks({\r\n          video: {\r\n            source: Track.Source.ScreenShare\r\n          }\r\n        });\r\n        \r\n        // Publish each track individually\r\n        for (const track of screenTracks) {\r\n          await localParticipant.publishTrack(track);\r\n        }\r\n        \r\n        setIsScreenSharing(true);\r\n      } else {\r\n        // Stop screen sharing\r\n        const screenTracks = localParticipant.getTracks(Track.Source.ScreenShare);\r\n        \r\n        for (const publication of screenTracks) {\r\n          await localParticipant.unpublishTrack(publication.track);\r\n        }\r\n        \r\n        setIsScreenSharing(false);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error toggling screen share:', err);\r\n      // User cancelled the screen share selection\r\n      if (err.name === 'NotAllowedError') {\r\n        return;\r\n      }\r\n      setError('Failed to toggle screen share');\r\n    }\r\n  };\r\n\r\n  // Leave room\r\n  const leaveRoom = () => {\r\n    if (room) {\r\n      room.disconnect();\r\n      setIsConnected(false);\r\n      onLeaveRoom();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"video-room\">\r\n      <div className=\"room-header\">\r\n        <h2>{roomName}</h2>\r\n        <div className=\"controls\">\r\n          <button\r\n            className={`control-button ${!isVideoEnabled ? 'disabled' : ''}`}\r\n            onClick={toggleVideo}\r\n          >\r\n            {isVideoEnabled ? 'Turn Off Camera' : 'Turn On Camera'}\r\n          </button>\r\n          <button\r\n            className={`control-button ${!isAudioEnabled ? 'disabled' : ''}`}\r\n            onClick={toggleAudio}\r\n          >\r\n            {isAudioEnabled ? 'Mute Mic' : 'Unmute Mic'}\r\n          </button>\r\n          <button\r\n            className={`control-button ${isScreenSharing ? 'active' : ''}`}\r\n            onClick={toggleScreenShare}\r\n          >\r\n            {isScreenSharing ? 'Stop Sharing' : 'Share Screen'}\r\n          </button>\r\n          <button className=\"control-button leave\" onClick={leaveRoom}>\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {error && <div className=\"error\">{error}</div>}\r\n\r\n      <div className={`participants-container ${activeScreenShare ? 'with-screen-share' : ''}`}>\r\n        {activeScreenShare && (\r\n          <div className=\"screen-share\">\r\n            <div className=\"screen-share-video\" id=\"screen-share-video\"></div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"participants\">\r\n          {localParticipant && (\r\n            <ParticipantComponent\r\n              key=\"local\"\r\n              participant={localParticipant}\r\n              isLocal={true}\r\n            />\r\n          )}\r\n          \r\n          {participants.map(participant => (\r\n            <ParticipantComponent\r\n              key={participant.sid}\r\n              participant={participant}\r\n              isLocal={false}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}