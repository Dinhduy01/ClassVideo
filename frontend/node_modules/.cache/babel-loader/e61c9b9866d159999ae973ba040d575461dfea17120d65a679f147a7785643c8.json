{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinhd\\\\Desktop\\\\Test\\\\frontend\\\\src\\\\components\\\\VideoRoom.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LiveKitRoom, VideoConference, RoomAudioRenderer, ControlBar, useTracks, useLocalParticipant, useRoomContext } from '@livekit/components-react';\n\n// Import CSS the correct way\nimport './VideoRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VideoRoom = ({\n  token,\n  url,\n  roomName,\n  participantName,\n  onLeaveRoom\n}) => {\n  _s();\n  const [error, setError] = useState('');\n  const [isFullScreen, setIsFullScreen] = useState(false);\n\n  // Handle connection errors\n  const handleError = err => {\n    console.error('Error connecting to LiveKit:', err);\n    setError(err.message || 'Failed to connect to room');\n  };\n\n  // Handle when the room is disconnected\n  const handleDisconnected = () => {\n    console.log('Disconnected from room');\n    onLeaveRoom();\n  };\n\n  // Toggle fullscreen mode\n  const toggleFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable full-screen mode: ${err.message}`);\n      });\n      setIsFullScreen(true);\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n        setIsFullScreen(false);\n      }\n    }\n  };\n\n  // Listen for fullscreen change events\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullScreen(!!document.fullscreenElement);\n    };\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Video Chat: \", roomName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fullscreen-btn\",\n          onClick: toggleFullScreen,\n          title: isFullScreen ? \"Exit fullscreen\" : \"Enter fullscreen\",\n          children: isFullScreen ? \"Exit Fullscreen\" : \"Fullscreen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(LiveKitRoom, {\n      token: token,\n      serverUrl: url,\n      options: {\n        adaptiveStream: true,\n        dynacast: true,\n        // Simplify the configuration to avoid the maxBitrate error\n        publishDefaults: {\n          simulcast: true\n        }\n      },\n      video: true,\n      audio: true,\n      onDisconnected: handleDisconnected,\n      onError: handleError,\n      className: \"livekit-container\",\n      \"data-lk-theme\": \"default\",\n      children: [/*#__PURE__*/_jsxDEV(CustomVideoConference, {\n        chatEnabled: false,\n        screenShareEnabled: true,\n        participantName: participantName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RoomAudioRenderer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom VideoConference component for more control over the UI\n_s(VideoRoom, \"9SmpLBb9mr5a8GV8lFNOg+J8PcM=\");\n_c = VideoRoom;\nconst CustomVideoConference = ({\n  chatEnabled,\n  screenShareEnabled,\n  participantName\n}) => {\n  _s2();\n  const {\n    localParticipant\n  } = useLocalParticipant();\n\n  // Update the participant name if available\n  useEffect(() => {\n    if (localParticipant && participantName) {\n      localParticipant.setName(participantName);\n    }\n  }, [localParticipant, participantName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-video-conference\",\n    children: /*#__PURE__*/_jsxDEV(VideoConference, {\n      chatEnabled: chatEnabled,\n      screenShareEnabled: screenShareEnabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s2(CustomVideoConference, \"gFhmT4+to2w/ezCoDC9qeQtIv8M=\", false, function () {\n  return [useLocalParticipant];\n});\n_c2 = CustomVideoConference;\nvar _c, _c2;\n$RefreshReg$(_c, \"VideoRoom\");\n$RefreshReg$(_c2, \"CustomVideoConference\");","map":{"version":3,"names":["React","useState","useEffect","LiveKitRoom","VideoConference","RoomAudioRenderer","ControlBar","useTracks","useLocalParticipant","useRoomContext","jsxDEV","_jsxDEV","VideoRoom","token","url","roomName","participantName","onLeaveRoom","_s","error","setError","isFullScreen","setIsFullScreen","handleError","err","console","message","handleDisconnected","log","toggleFullScreen","document","fullscreenElement","documentElement","requestFullscreen","catch","exitFullscreen","handleFullscreenChange","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","serverUrl","options","adaptiveStream","dynacast","publishDefaults","simulcast","video","audio","onDisconnected","onError","CustomVideoConference","chatEnabled","screenShareEnabled","_c","_s2","localParticipant","setName","_c2","$RefreshReg$"],"sources":["C:/Users/dinhd/Desktop/Test/frontend/src/components/VideoRoom.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  LiveKitRoom,\r\n  VideoConference,\r\n  RoomAudioRenderer,\r\n  ControlBar,\r\n  useTracks,\r\n  useLocalParticipant,\r\n  useRoomContext,\r\n} from '@livekit/components-react';\r\n\r\n// Import CSS the correct way\r\nimport './VideoRoom.css';\r\n\r\nexport const VideoRoom = ({ token, url, roomName, participantName, onLeaveRoom }) => {\r\n  const [error, setError] = useState('');\r\n  const [isFullScreen, setIsFullScreen] = useState(false);\r\n\r\n  // Handle connection errors\r\n  const handleError = (err) => {\r\n    console.error('Error connecting to LiveKit:', err);\r\n    setError(err.message || 'Failed to connect to room');\r\n  };\r\n\r\n  // Handle when the room is disconnected\r\n  const handleDisconnected = () => {\r\n    console.log('Disconnected from room');\r\n    onLeaveRoom();\r\n  };\r\n\r\n  // Toggle fullscreen mode\r\n  const toggleFullScreen = () => {\r\n    if (!document.fullscreenElement) {\r\n      document.documentElement.requestFullscreen().catch(err => {\r\n        console.error(`Error attempting to enable full-screen mode: ${err.message}`);\r\n      });\r\n      setIsFullScreen(true);\r\n    } else {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n        setIsFullScreen(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Listen for fullscreen change events\r\n  useEffect(() => {\r\n    const handleFullscreenChange = () => {\r\n      setIsFullScreen(!!document.fullscreenElement);\r\n    };\r\n\r\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\r\n    return () => {\r\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"video-room\">\r\n      <div className=\"room-header\">\r\n        <h2>Video Chat: {roomName}</h2>\r\n        <div className=\"room-controls\">\r\n          <button \r\n            className=\"fullscreen-btn\" \r\n            onClick={toggleFullScreen}\r\n            title={isFullScreen ? \"Exit fullscreen\" : \"Enter fullscreen\"}\r\n          >\r\n            {isFullScreen ? \"Exit Fullscreen\" : \"Fullscreen\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {error && <div className=\"error\">{error}</div>}\r\n\r\n      <LiveKitRoom\r\n        token={token}\r\n        serverUrl={url}\r\n        options={{\r\n          adaptiveStream: true,\r\n          dynacast: true,\r\n          // Simplify the configuration to avoid the maxBitrate error\r\n          publishDefaults: {\r\n            simulcast: true,\r\n          },\r\n        }}\r\n        video={true}\r\n        audio={true}\r\n        onDisconnected={handleDisconnected}\r\n        onError={handleError}\r\n        className=\"livekit-container\"\r\n        data-lk-theme=\"default\"\r\n      >\r\n        {/* Use custom VideoConferenceView for more control */}\r\n        <CustomVideoConference \r\n          chatEnabled={false}\r\n          screenShareEnabled={true}\r\n          participantName={participantName}\r\n        />\r\n        <RoomAudioRenderer />\r\n      </LiveKitRoom>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Custom VideoConference component for more control over the UI\r\nconst CustomVideoConference = ({ chatEnabled, screenShareEnabled, participantName }) => {\r\n  const { localParticipant } = useLocalParticipant();\r\n  \r\n  // Update the participant name if available\r\n  useEffect(() => {\r\n    if (localParticipant && participantName) {\r\n      localParticipant.setName(participantName);\r\n    }\r\n  }, [localParticipant, participantName]);\r\n  \r\n  return (\r\n    <div className=\"custom-video-conference\">\r\n      <VideoConference \r\n        chatEnabled={chatEnabled} \r\n        screenShareEnabled={screenShareEnabled}\r\n      />\r\n    </div>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}